*,
*::before,
*::after{
  list-style: none;
  box-sizing: border-box;
}

body{
  font-family: 'Noto Sans TC', sans-serif;
}

.container{
  width: 75%;
  padding-left: 15px;
  padding-right: 15px;
  margin: auto;
}

h1,
h2,
h3,
h4,
h5,
h6{
  margin: 20px 0 20px;
}

p{
  margin-bottom: 1rem;
}

section{
  margin-bottom: 2rem;
}

/* 03.變數_________________________________________________________________*/
/* CSS原生變數*/
:root{
  --primary: #007bff;
  --secondary: #6c757d;
  --success: #28a745;
  --info: #17a2b8;
  --waring: #ffc107;
  --danger: #dc3545;
  // --white: #ffffff;
}

$primary: #007bff;
$secondary: #6c757d;
$success: #28a745;
$info: #17a2b8;
$waring: #ffc107;
$danger: #dc3545;
$white: #ffffff;

// $defaultColor被賦值
$defaultColor: blue;
// !default 就不會使用預設值
$defaultColor: red !default;
$defaultColor: green;

// 全域變數
$width: 200px;

.foo{
  // 區域變數
  $width:100px;
  width: $width;
  color: $defaultColor;
}

$grdient:linear-gradient(0deg, rgb(0,0,50) 0%, rgb(0,50,200) 50%, rgb(0,0,255) 100%);
$border: 5px solid #fff;
$border-radius: 0.5rem;
$padding:0.5rem 0.5rem;
$margin-bottom: 1rem;
$shadow: 0 0 5px rgba(0,0,0,0.8);

h1 {
  background: $grdient;
  color: $white;
  border: $border;
  border-radius: $border-radius;
  padding: $padding;
  box-shadow: $shadow;
  margin-bottom: $margin-bottom;
}

$bg_dark: #000;
.foo2{
  color: $bg-dark;
}

/* 04.流程控制_________________________________________________________________*/
$number: 1;
.mybox {
  width: 150px;
  height: 150px;
  display: flex;
  justify-content: center;
  align-items: center;
  /* @if~ @else if ~ @else */
  // 可以省略小括號，也可以使用
  // 沒有嚴格相等 ===
  @if($number == 1){
    background-color: red;
  }@else if $number == 2{
    background-color: blue;
  }@else {
    background-color: green;
  }

  // 判斷會通過，數字分為有單位、沒單位
  @if(10 == 10px) {
    font-style: italic;
  }

  // 判斷會通過，字串分為有引號，無引號
  @if(holloworld = 'holloworld') {
    box-shadow: 0 0 10px 15px rgba(0, 0, 0, 0.5);
  }

  /* 使用 and 兩運算式條件成立 */
  $stand: '石之自由';
  $master: '空條徐倫';
  @if($stand == '石之自由' and $master == '空條徐倫') {
    color: white !important;
  } @else {
    color: yellow !important;
  }

   /* 使用 or 兩運算式其中之一成立，不能使用|| */
  $feeling: '好';
  $money: '有錢';
  @if($feeling == '好' or $money == '有錢') {
    font-size: 50px;
    font-weight: bolder;
  }

  /* 使用 not 反轉運算式的結果 */
  $box-width: 50px;
  @if not ($box-width == 100px){
    border: 10px dashed yellow;
  }

  /* 內建函式，類似三元運算子，因為函式，因此if沒有@ */
  $handsome: true;
  outline: if($handsome == true, 10px solid green, 10px solid #aaa)
}

/*@for 迴圈有兩種through 與 to*/
/* @for ... through*/
@for $i from 1 through 3{
  // 插值語法 #{}
  .through-#{$i}{
    width: 50px * $i;
    height: 50px * $i;
    display: inline-block;
    background: #aaa;
  }
}

/* @for ... to*/
// 不包含end
@for $i from 1 to 3{
  // 插值語法 #{}
  .to-#{$i}{
    width: 50px * $i;
    height: 50px * $i;
    display: inline-block;
    background: #aaa;
  }
}

/* 05. 嵌套巢狀_________________________________________________________________*/
#section05{
  p{
    border-bottom: 1px solid #000;
  }
  .menu {
    margin-top: 2rem;
    padding: 0;
    font-size: 0;
    li {
      display: inline-block;
      font-size: 1rem;
      width: 100px;
      text-align: center;
      a{
        display: block;
        background: black;
        color: white;
        text-decoration: none;
        padding: 0.5rem;
        // &符號可以表示父層選擇器
        &:hover{
          color: yellow;
          background: darkmagenta;
        }
      }
      & + li{
        border-left: 1px solid yellow;
      }
      /* 不用& + li，也可以這樣寫 */
      li + li{
        border-left: 1px solid white;
      }
    }
  }
}

// &與clearfix
.clearfix{
  &::after{
    content: '';
    display: block;
    clear: both;
  }
}

/* BEM巢狀寫法，使用& */
// Block element modifier
// 父結構block
.sidebar{
  display: flex;
  // 子元素 element
  &__item{
    color: red;
    padding: 1rem;
    border: 1px solid #333;
    text-decoration: none;
    &--active {
      color: yellow;
      background-color: black;
    }
    &:hover {
      color: yellow;
      background-color: black;
    }
  }
}

// 三欄
#exercise{
  .row{
    display: flex;
    padding: 5px;
  }
  .col{
    margin: 5px;
    border: 1px solid black;
    display: flex;
    flex-direction: column;
    align-items: center;
    box-shadow: 0 0 10px rgba(0,0,0,0.5);
    transition: 0.5s;
    &:hover{
      transform: translateY(-20px);
    }
  }
}

/* 06. Extend(繼承)%____________________________________*/
.extend{
  width: 100px;
  height: 100px;
  float: left;
}

%extend{
  width: 50px;
  height: 50px;
  float: left;
}

.box1{
  @extend %extend;
  background: green;
}

.box2{
  @extend %extend;
  background: red;
}

.box3{
  @extend %extend;
  background: blue;
}

.box4{
  @extend .extend;
  background: yellow;
}

.box5{
  @extend .extend;
  background: cyan;
}

/* 07. 計算____________________________________*/
.box4{
  background: #000;
  /* 加法 */
  width: 50px + 50px;
  width: 50px + 50;//有無單位相加 pass
  height: 50px + 50px;

  /* 減法 */
  width: 100px - 50px;
  width: 100px - 50;
  height: 100px -  50px;

  /* 乘法 */
  width: 50px * 2;
  // width: 50px * 2px; // oops 編譯掛了 小心
  height: 50px * 2;

  /* 除法 */
  // width: 100px / 2; //會通過，但CSS無法使用
  width: (100px / 2); //除法請使用小括號
  /*變數不需要括號*/
  $child:500px;
  $mother:10;
  height: $child / $mother;

  /* 需要注意，分子分母都有單位，單位會被消除*/
  $child2:10px;
  $mother2:10px;
  line-height:  $child2 / $mother2;

  /* 餘數 */
  margin-top: 20px % 100;

  /* calc 函式使用變數時，使用插值語法*/
  $var1: 20px;
  $var2: 1vw;
  margin-bottom: calc(#{$var1} +#{$var2});
}

/* 08. 函式____________________________________*/
// 函式內部可以進行邏輯判斷回傳一個值
@function randomFont(){
  // random()是內建函式，可以直接使用
  $result: random(3);
  @if($result == 1){
    @return 20px;
  }@else if($result == 2) {
    @return 40px;
  } @else {
    @return 60px;
  }
}

// 傳參數
@function boxLength1($length, $base){
  @return $length * $base * 1px;
}

// 指定預設值
@function boxLength2($length:100, $base:1){
  @return $length * $base * 1px;
}

.funcbox{
  width: 100px;
  height: 100px;
  color:white;
  // 函式呼叫，回傳一個值
  font-size: randomFont();
  width:  boxLength1(100, 2);
  height: boxLength2();
  background-color: #dc3545;
}

// px to rem
@function rem($px){
  // unit() 內建函式，會提取出單位
  @if(unit($px) == 'px'){
    @return($px / 16px) * 1rem;
  } @else {
    @return($px / 16) * 1rem;
  }
}

.rem{
  font-size: rem(16px);
  padding: rem(48);
}

// 計算字體大小
$baseFontSize: 14px;
$size: 2px;

@function fontSize($level: 1){
  @if($level < 0){
    $level: 1;
  }
  // round 四捨五入，內建函式
  @return round($baseFontSize + $size * $level);
}

// 計算行高
$lineHeightLevel:1.5;
@function lineHeight($fontSize){
  // ceil無條件進位，內建函式
  @return ceil($fontSize * $lineHeightLevel);
}

// 計算欄位寬度
@function col-width($col-count){
  @return (100% / $col-count);
}

// 灰階
@function gray($level: 0%){
  @return darken(#fff, $level);
}

#section08{
  .container{
    p{
      font-size:fontSize(2.2);
      line-height: lineHeight(fontSize(2));
    }
  }
  .row{
    display: flex;
    flex-wrap: wrap;
    .col{
      border: 1px solid #333;
      padding: 1%;
      margin: 1% 0;
      width: col-width(3);
      background: gray(10%);
      // 只有純白，純黑才能 0 ~ 100% 調整，其他顏色會依據顏色深淺，不一定是0 ~100%
      color: lighten(black, 10%);
      // color: lighten(green, 80%);

      // 可以使用 mix() 來混白色、黑色
      color: mix(#fff, red, 50%);
      color: mix(#000, blue, 50%);
    }
  }
}

/* 09. Mixins__________________________________*/
@mixin mixinTry(){
  width: 100px;
  height: 100px;
  background: #333;
}

// 使用 @include 呼叫 mixin
.mixinTry{
  @include mixinTry();
}

@mixin box($width, $height, $bg, $border, $outline: 10px dashed pink) {
  width: $width;
  height: $height;
  background: $bg;
  border:  $border;
  outline:  $outline;
}

@mixin flex($main, $cross){
  display: flex;
  justify-content: $main;
  align-items: $cross;
}

// 使用 @include時，參數沒有使用不能省略。如要省略，要傳入null
.boxflex{
  @include box(100px, 100px, null, 5px solid #333);
  @include flex(center, center)
}

// 使用 mixin 建立按鈕
.btn{
  display: inline-block;
  color: #fff;
  text-decoration: none;
  line-height: 1.5;
  padding: 0.3rem 0.75rem;
  margin: 0 0.2rem;
  border-radius: 0.25rem;
}

// mixin沒有參數可以拿掉小括號
@mixin box-shadow{
  box-shadow: 0 0 0.3rem 0.1rem rgba(0,0,0,0.5);
}

@mixin btn-set($bgcolor){
  &{
    @include box-shadow;
    background-color: $bgcolor;
  }
  &:hover{
    @if $bgcolor == #000 {
      background-color: lighten($bgcolor, 10%);
    } @else {
      background-color: darken($bgcolor, 10%);
    }
  }
}

.btn-primary{
  @include btn-set($primary)
}
.btn-success{
  @include btn-set($success)
}
.btn-danger{
  @include btn-set($danger)
}
.btn-dark{
  @include btn-set(#000)
}

/* @mixin 的其餘參數，可以使用...表示 */
// 其餘參數是用list表示
@mixin box-shadow($width, $height, $shadows...){
  width: $width;
  height: $height;
  box-shadow: $shadows;
  // nth()內建函式，list的index是從1開始
  text-shadow: nth($shadows, 2);
}

.box-shadow{
  @include box-shadow(100px, 100px, 0 0 10px blue, 0 0 20px red);
}

%box{
  display: inline-block;
  width: 100px;
  height: 100px;
  border:1px solid #000;
}

@mixin build-step($selectors...){
  @for $i from 1 through length($selectors){
    .#{nth($selectors, $i)}{
      @extend %box;
      background: rgb(random(255), random(255), random(255));
    }
  }
}

// 引數會以 list 資料型態帶入參數
@include build-step('b1','b2','b3','b4','b5');

/* 10. 使用mixmin + @countent 來設計 RWD__________________________________*/
$breakpoint-sm: 576px;
$breakpoint-md: 768px;
$breakpoint-lg: 992px;
$breakpoint-xl: 1200px;
$breakpoint-xxl: 1400px;

@mixin sm{
  @media (min-width: $breakpoint-sm) {
    @content;
  }
}
@mixin md{
  @media (min-width: $breakpoint-md) {
    @content;
  }
}
@mixin lg{
  @media (min-width: $breakpoint-lg) {
    @content;
  }
}
@mixin xl{
  @media (min-width: $breakpoint-xl) {
    @content;
  }
}
@mixin xxl{
  @media (min-width: $breakpoint-xxl) {
    @content;
  }
}

// #news{
//   @include sm{
//   }
//   @include md{

//   }
//   @include lg{

//   }
//   @include xl{

//   }
//   @include xxl{

//   }
// }

#section10{
  // xs
  .container{
    width: 100%;
  }
  .row{
    display: flex;
    flex-wrap: wrap;
  }
  .col{
    width: 100%;
    padding: 15px;
    border: 1px solid black;
  }
  .col + .col{
    margin-top: 20px;
  }
// sm
  @include sm{
    .container{
      width: 75%;
    }
    .col{
      width: 50%;
    }
    .col{
      width: 75%;
    }
    .col + .col{
      margin-top: 0px;
    }
  }
  // md
  @include md{
    .col{
      width: 33.33333;
    }
  }
  // lg
  @include lg{
    .col{
      width: 25%;
    }
  }
  // xl
  @include xl{
    .col{
      width: 20%;
    }
  }
  // xxl
  @include xxl{
    .col{
      width: 10%;
    }
  }
}

$width_list: 100px, 200px, 300px;
$margin_list: 10px, 20px, 30px 40px;
$bgColor_list: red, green, blue;
$zindex_list: 1 2 3 4;
$border_list: 1px solid red, 1px solid blue, 1px solid green, 1px solid yellow;

/* nth(list, index)內建函式，取出list裡面的item值 */
.list{
  width: nth($width_list, 1);
  width: nth($width_list, 2);
  width: nth($width_list, 3);
}

/* index(list, value)內建函式，取出索引值*/
.index{
  line-height: index($width_list, 100px);
  line-height: index($width_list, 200px);
  line-height: index($width_list, 300px);
}

/* length($list)內建函式，取出索引值 */
.length{
  z-index: length($bgColor_list);
}

// @for + list 取出item值
@for $i from 1 through length($bgColor_list){
  .bg-#{nth($bgColor_list,$i)}{
    background-color: nth($bgColor_list, $i);
  }
}

// 使用each 從list取出item值
@each $value in $bgColor_list{
  .each-bg-#{$value} {
    background-color: $value;
  }
}

/* Map */
// map寫完記得加上分號
$map1:(
  primary: red,
  secondary: green,
  waring: blue
);

@each $key, $value in $map1{
  .bg-#{$key}{
    background-color: $value;
  }
}

$map2:(
  size1: 100px,
  size2: 200px,
  size3: 300px
);

/* .map-keys($map),對 map 物件取出 key 變成一組 list */
.map-keys{
  color: map-keys($map2);
}

$map3:(
  shadow1:0 0 10px black,
  shadow2:0 0 20px black,
  shadow3:0 0 30px black
);

.map-values {
  color: map-values($map3);
}

$i: 0;
@each $value in map-values($map3) {
  $i: $i + 1;
  .w#{$i}{
    box-shadow: $value;
  }
}

$map4:(
  default:(
    width:100px,
    height:100px
  ),
  box1:(
    width:200px,
    height:200px
  ),
  box2:(
    width:300px,
    height:300px
  )
);

// map-get(map, key) 取出value
@each $key, $value in $map4{
  $width: map-get($value, width);
  $height: map-get($value, height);
  .btn-#{$key}{
    width: $width;
    height: $height;
  }
}
